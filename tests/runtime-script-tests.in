#!@TERMUX__PREFIX@/bin/bash
# shellcheck shell=bash

runExecTests() {

    termux_exec__tests__log 2 "runExecTests()"

    # Setup temp directory for exec tests.
    TERMUX_EXEC__TESTS__EXEC_TMPDIR_PATH="$TERMUX_EXEC__TESTS__TMPDIR_PATH/exec"
    mkdir -p "$TERMUX_EXEC__TESTS__EXEC_TMPDIR_PATH" || return $?

    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME="test-script"
    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH="$TERMUX_EXEC__TESTS__EXEC_TMPDIR_PATH/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME"

    testExec__Basic || return $?
    testExec__Interpreter || return $?
    testExec__SingleAndDoubleDotExecutablePaths || return $?
    testExec__SingleAndDoubleDotInterpreterPaths || return $?
    testExec__Shell || return $?

    [[ "$TERMUX_EXEC__TESTS__ONLY_TERMUX_EXEC_TESTS" == "true" ]] && return 0

    testExec__AndroidTools || return $?
    testExec__TermuxCore || return $?
    testExec__TermuxTools || return $?
    testExec__TermuxAm || return $?
    testExec__TermuxAmSocket || return $?
    testExec__TermuxApi || return $?
    testExec__Tudo || return $?
    testExec__Sudo || return $?

    return 0

}



testExec__Basic() {

    termux_exec__tests__log 3 "testExec__Basic()"

    termux_exec__tests__run_script_test "not-executable" \
        "#!/bin/bash${NL}echo hello" "false" \
        "" "." \
        126 "^.*: $TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH: Permission denied$" || return $?

    termux_exec__tests__run_script_test "is-executable" \
        "#!/bin/bash${NL}echo hello" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "usr-bin-env" \
        "#!/usr/bin/env bash${NL}echo hello-user-bin-env" "true" \
        "" "." \
        0 "^hello-user-bin-env$" || return $?

    termux_exec__tests__run_script_test "termux-bin-env" \
        "#!$TERMUX__PREFIX/bin/env bash${NL}echo hello-termux-bin-env" "true" \
        "" "." \
        0 "^hello-termux-bin-env$" || return $?

    termux_exec__tests__run_script_test "empty-file" \
        "" "true" \
        "" "." \
        0 "^$" || return $?

    return 0

}

testExec__Interpreter() {

    termux_exec__tests__log 3 "testExec__Interpreter()"

    termux_exec__tests__run_script_test "shebang-with-initial-whitespace" \
        "# !/bin/sh${NL}echo hello" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "shebang-with-args-with-spaces" \
        "#!/bin/echo     hello  world   bye${NL}" "true" \
        "" "." \
        0 "^hello  world   bye $TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH arg1 arg2$" \
        "arg1" "arg2" || return $?


    termux_exec__tests__run_script_test "shebang-path-missing" \
        "#!${NL}" "true" \
        "" "." \
        0 "^$" || return $?

    termux_exec__tests__run_script_test "shebang-path-whitespace" \
        "#! ${NL}" "true" \
        "" "." \
        0 "^$" || return $?

    termux_exec__tests__run_script_test "shebang-path-rootfs" \
        "#!/${NL}" "true" \
        "" "." \
        126 "^.*: $TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH: /: bad interpreter: Permission denied$" || return $?

    if [ "$ANDROID__BUILD_VERSION_SDK" -ge 24 ]; then
        termux_exec__tests__run_script_test "shebang-path-not-found" \
            "#!/x${NL}" "true" \
            "" "." \
            127 "^.*: $TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH: cannot execute: required file not found$" || return $?
    else
        termux_exec__tests__run_script_test "shebang-path-not-found" \
            "#!/x${NL}" "true" \
            "" "." \
            126 "^.*: $TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH: /x: bad interpreter: No such file or directory$" || return $?
    fi

    return 0

}

testExec__SingleAndDoubleDotExecutablePaths() {

    termux_exec__tests__log 3 "testExec__SingleAndDoubleDotExecutablePaths()"

    # $TMPDIR
    #   - termux-exec
    #     - exec
    #       - dir1
    #         - subdir1
    #       - dir2

    local tests_dir_path="$TERMUX_EXEC__TESTS__EXEC_TMPDIR_PATH"
    rm -rf "$tests_dir_path" || return $?

    local dir1_name="dir1"
    local dir1_path="$tests_dir_path/$dir1_name"
    local subdir1_name="subdir1"
    local subdir1_path="$dir1_path/$subdir1_name"
    mkdir -p "$subdir1_path" || return $?

    local dir2_name="dir2"
    local dir2_path="$tests_dir_path/$dir2_name"
    mkdir -p "$dir2_path" || return $?

    local original_script_test_file_path="$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH"



    # Relative: Executable in current directory.
    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH="$tests_dir_path/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME"

    termux_exec__tests__run_script_test "executable-relative-current-dir-one-single-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "./$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "$tests_dir_path" \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "executable-relative-current-dir-two-single-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "././$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "$tests_dir_path" \
        0 "^hello$" || return $?


    # Relative: Executable in parent directory.
    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH="$tests_dir_path/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME"

    termux_exec__tests__run_script_test "executable-relative-parent-dir-one-double-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "../$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "$dir1_path" \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "executable-relative-parent-dir-two-double-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "../../$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "$subdir1_path" \
        0 "^hello$" || return $?


    # Relative: Executable in sibling directory.
    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH="$dir2_path/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME"

    termux_exec__tests__run_script_test "executable-relative-sibling-dir-one-double-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "../$dir2_name/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "$dir1_path" \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "executable-relative-sibling-dir-two-double-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "../../$dir2_name/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "$subdir1_path" \
        0 "^hello$" || return $?



    # Absolute: Executable in current directory.
    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH="$tests_dir_path/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME"

    termux_exec__tests__run_script_test "executable-absolute-current-dir-one-single-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "$tests_dir_path/./$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "executable-absolute-current-dir-two-single-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "$tests_dir_path/././$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "." \
        0 "^hello$" || return $?


    # Absolute: Executable in parent directory.
    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH="$tests_dir_path/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME"

    termux_exec__tests__run_script_test "executable-absolute-parent-dir-one-double-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "$dir1_path/../$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "executable-absolute-parent-dir-two-double-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "$subdir1_path/../../$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "." \
        0 "^hello$" || return $?


    # Absolute: Executable in sibling directory.
    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH="$dir2_path/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME"

    termux_exec__tests__run_script_test "executable-absolute-sibling-dir-one-double-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "$dir1_path/../$dir2_name/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "executable-absolute-sibling-dir-two-double-dot" \
        "#!/bin/bash${NL}echo hello" "true" \
        "$subdir1_path/../../$dir2_name/$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_NAME" "." \
        0 "^hello$" || return $?



    TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH="$original_script_test_file_path"

    return 0

}

testExec__SingleAndDoubleDotInterpreterPaths() {

    termux_exec__tests__log 3 "testExec__SingleAndDoubleDotInterpreterPaths()"

    # $TMPDIR
    #   - termux-exec
    #     - exec
    #       - dir1
    #         - subdir1
    #       - dir2

    local tests_dir_path="$TERMUX_EXEC__TESTS__EXEC_TMPDIR_PATH"
    rm -rf "$tests_dir_path" || return $?

    local dir1_name="dir1"
    local dir1_path="$tests_dir_path/$dir1_name"
    local subdir1_name="subdir1"
    local subdir1_path="$dir1_path/$subdir1_name"
    mkdir -p "$subdir1_path" || return $?

    local dir2_name="dir2"
    local dir2_path="$tests_dir_path/$dir2_name"
    mkdir -p "$dir2_path" || return $?


    local bash_bin_path="$TERMUX__PREFIX/bin/bash"
    local interpreter_file_name="bash"
    local interpreter_file_path


    # Relative: Executable in current directory.
    interpreter_file_path="$tests_dir_path/$interpreter_file_name"
    ln -s "$bash_bin_path" "$interpreter_file_path" || return $?

    termux_exec__tests__run_script_test "interpreter-relative-current-dir-one-single-dot" \
        "#!./$interpreter_file_name${NL}echo hello" "true" \
        "" "$tests_dir_path" \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "interpreter-relative-current-dir-two-single-dot" \
        "#!././$interpreter_file_name${NL}echo hello" "true" \
        "" "$tests_dir_path" \
        0 "^hello$" || return $?

    rm -f "$interpreter_file_path" || return $?


    # Relative: Executable in parent directory.
    interpreter_file_path="$tests_dir_path/$interpreter_file_name"
    ln -s "$bash_bin_path" "$interpreter_file_path" || return $?

    termux_exec__tests__run_script_test "interpreter-relative-parent-dir-one-double-dot" \
        "#!../$interpreter_file_name${NL}echo hello" "true" \
        "" "$dir1_path" \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "interpreter-relative-parent-dir-two-double-dot" \
        "#!../../$interpreter_file_name${NL}echo hello" "true" \
        "" "$subdir1_path" \
        0 "^hello$" || return $?

    rm -f "$interpreter_file_path" || return $?


    # Relative: Executable in sibling directory.
    interpreter_file_path="$dir2_path/$interpreter_file_name"
    ln -s "$bash_bin_path" "$interpreter_file_path" || return $?

    termux_exec__tests__run_script_test "interpreter-relative-sibling-dir-one-double-dot" \
        "#!../$dir2_name/$interpreter_file_name${NL}echo hello" "true" \
        "" "$dir1_path" \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "interpreter-relative-sibling-dir-two-double-dot" \
        "#!../../$dir2_name/$interpreter_file_name${NL}echo hello" "true" \
        "" "$subdir1_path" \
        0 "^hello$" || return $?

    rm -f "$interpreter_file_path" || return $?



    # Absolute: Executable in current directory.
    interpreter_file_path="$tests_dir_path/$interpreter_file_name"
    ln -s "$bash_bin_path" "$interpreter_file_path" || return $?

    termux_exec__tests__run_script_test "interpreter-absolute-current-dir-one-single-dot" \
        "#!$tests_dir_path/./$interpreter_file_name${NL}echo hello" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "interpreter-absolute-current-dir-two-single-dot" \
        "#!$tests_dir_path/././$interpreter_file_name${NL}echo hello" "true" \
        "" "." \
        0 "^hello$" || return $?

    rm -f "$interpreter_file_path" || return $?


    # Absolute: Executable in parent directory.
    interpreter_file_path="$tests_dir_path/$interpreter_file_name"
    ln -s "$bash_bin_path" "$interpreter_file_path" || return $?

    termux_exec__tests__run_script_test "interpreter-absolute-parent-dir-one-double-dot" \
        "#!$dir1_path/../$interpreter_file_name${NL}echo hello" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "interpreter-absolute-parent-dir-two-double-dot" \
        "#!$subdir1_path/../../$interpreter_file_name${NL}echo hello" "true" \
        "" "." \
        0 "^hello$" || return $?

    rm -f "$interpreter_file_path" || return $?


    # Absolute: Executable in sibling directory.
    interpreter_file_path="$dir2_path/$interpreter_file_name"
    ln -s "$bash_bin_path" "$interpreter_file_path" || return $?

    termux_exec__tests__run_script_test "interpreter-absolute-sibling-dir-one-double-dot" \
        "#!$dir1_path/../$dir2_name/$interpreter_file_name${NL}echo hello" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "interpreter-absolute-sibling-dir-two-double-dot" \
        "#!$subdir1_path/../../$dir2_name/$interpreter_file_name${NL}echo hello" "true" \
        "" "." \
        0 "^hello$" || return $?

    rm -f "$interpreter_file_path" || return $?

    return 0

}

testExec__Shell() {

    termux_exec__tests__log 3 "testExec__Shell()"

    # `/dev/stdin` does not exist on Android 7, so use `/proc/self/fd/0`

    termux_exec__tests__run_script_test "bash-heredoc-no-args" \
        "#!/usr/bin/bash${NL}bash <<'EOF'${NL}echo hello${NL}EOF" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "cat-bash-heredoc-no-args" \
        "#!/usr/bin/bash${NL}cat <<'EOF' | bash${NL}echo hello${NL}EOF" "true" \
        "" "." \
        0 "^hello$" || return $?


    termux_exec__tests__run_script_test "bash-heredoc-with-args" \
        "#!/usr/bin/bash${NL}bash /proc/self/fd/0 hello<<'EOF'${NL}echo \$1${NL}EOF" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "cat-bash-heredoc-with-args" \
        "#!/usr/bin/bash${NL}cat <<'EOF' | bash /proc/self/fd/0 hello${NL}echo \$1${NL}EOF" "true" \
        "" "." \
        0 "^hello$" || return $?


    termux_exec__tests__run_script_test "bash-herestring-no-args" \
        "#!/usr/bin/bash${NL}bash <<<'echo hello'" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "cat-bash-herestring-no-args" \
        "#!/usr/bin/bash${NL}cat <<<'echo hello' | bash" "true" \
        "" "." \
        0 "^hello$" || return $?


    termux_exec__tests__run_script_test "bash-herestring-with-args" \
        "#!/usr/bin/bash${NL}bash  /proc/self/fd/0 hello <<<'echo \$1'" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "cat-bash-herestring-with-args" \
        "#!/usr/bin/bash${NL}cat <<<'echo \$1' | bash /proc/self/fd/0 hello" "true" \
        "" "." \
        0 "^hello$" || return $?


    termux_exec__tests__run_script_test "builtin-echo-cat-pipe" \
        "#!/usr/bin/bash${NL}echo hello | cat" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "external-echo-cat-pipe" \
        "#!/usr/bin/bash${NL}$TERMUX__PREFIX/bin/echo hello | cat" "true" \
        "" "." \
        0 "^hello$" || return $?

    termux_exec__tests__run_script_test "external-echo-sed-pipe" \
        "#!/usr/bin/bash${NL}$TERMUX__PREFIX/bin/echo '|hello|' | sed -e 's/|//g'" "true" \
        "" "." \
        0 "^hello$" || return $?


    termux_exec__tests__run_script_test "fd-read-write" \
        "#!/usr/bin/bash${NL}exec {fd}< <(echo -n hello)${NL}cat /proc/self/fd/\${fd}${NL}exec {fd}>&-" "true" \
        "" "." \
        0 "^hello$" || return $?

    return 0

}

testExec__AndroidTools() {

    termux_exec__tests__log 3 "testExec__AndroidTools()"

    # Remove LD_LIBRARY_PATH from environment to avoid conflicting
    # with system libraries that system binaries may link against
    # Some tools require having /system/bin/app_process in the PATH,
    # at least `am` and `pm` on a Nexus 6p running Android `6.0`.
    local android_env="LD_LIBRARY_PATH= LD_PRELOAD= PATH=/system/bin"

    termux_exec__tests__run_script_test "android-getprop-ro-build-version-sdk" \
        "#!/usr/bin/bash${NL}${android_env} /system/bin/getprop 'ro.build.version.sdk'" "true" \
        "" "." \
        0 "^[0-9]+$" || return $?

    termux_exec__tests__run_script_test "android-pm-list-termux-package" \
        "#!/usr/bin/bash${NL}out=\"\$(${android_env} /system/bin/pm list packages -u --user '$TERMUX__USER_ID' 2>&1 </dev/null)\"; echo \"\$out\" | grep '$TERMUX_APP__PACKAGE_NAME'" "true" \
        "" "." \
        0 "^.*package:$TERMUX_APP__PACKAGE_NAME.*$" || return $?

    termux_exec__tests__run_script_test "android-logcat" \
        "#!/usr/bin/bash${NL}${android_env} /system/bin/logcat -d -t 100" "true" \
        "" "." \
        0 "^.*..*$" || return $?

    return 0

}

testExec__TermuxCore() {

    [[ "$TERMUX_EXEC__TESTS__SKIP_TERMUX_CORE_TESTS" == "true" ]] && return 0

    termux_exec__tests__log 3 "testExec__TermuxCore()"

    local termux_core__tests_file_path="$TERMUX__PREFIX/libexec/installed-tests/termux-core/termux-core-tests"

    if [[ ! -f "$termux_core__tests_file_path" ]]; then
        termux_exec__tests__log 3 "Skipping termux-core tests since 'termux-core-tests' file not found"
        return 0
    fi

    printf -v "$TERMUX_CORE__TESTS__LOG_LEVEL___N" "%s" "$TERMUX_EXEC__TESTS__LOG_LEVEL" || exit $?
    export "${TERMUX_CORE__TESTS__LOG_LEVEL___N?}" || exit $?

    "$termux_core__tests_file_path" all || return $?

    return 0

}

testExec__TermuxTools() {

    termux_exec__tests__log 3 "testExec__TermuxTools()"

    termux_exec__tests__run_script_test "termux-getprop-ro-build-version-sdk" \
        "#!/usr/bin/bash${NL}getprop 'ro.build.version.sdk'" "true" \
        "" "." \
        0 "^[0-9]+$" || return $?

    termux_exec__tests__run_script_test "termux-pm-list-termux-package" \
        "#!/usr/bin/bash${NL}out=\"\$(pm list packages -u --user '$TERMUX__USER_ID' 2>&1 </dev/null)\"; echo \"\$out\" | grep '$TERMUX_APP__PACKAGE_NAME'" "true" \
        "" "." \
        0 "^.*package:$TERMUX_APP__PACKAGE_NAME.*$" || return $?

    termux_exec__tests__run_script_test "termux-logcat" \
        "#!/usr/bin/bash${NL}logcat -d -t 100" "true" \
        "" "." \
        0 "^.*..*$" || return $?

    if [ "$ANDROID__BUILD_VERSION_SDK" -ge 24 ]; then
        termux_exec__tests__run_script_test "termux-info" \
            "#!/usr/bin/bash${NL}termux-info --no-set-clipboard" "true" \
            "" "." \
            0 "^.*$TERMUX__USER_ID___N=$TERMUX__USER_ID.*$" || return $?
    fi

    # Send empty file/url and just check no error was set while sending intent.
    termux_exec__tests__run_script_test "termux-open" \
        "#!/usr/bin/bash${NL}termux-open ''" "true" \
        "" "." \
        0 "^.*.*$" || return $?

    # Just check no error was set while sending intent.
    # termux-setup-storage, sends the same intent but requires ~/storage
    # directory to not exist, so do not test that.
    termux_exec__tests__run_script_test "termux-reload-settings" \
        "#!/usr/bin/bash${NL}termux-reload-settings" "true" \
        "" "." \
        0 "^.*.*$" || return $?

    return 0

}

testExec__TermuxAm() {

    termux_exec__tests__log 3 "testExec__TermuxAm()"

    # The `--user` flag must be passed if running in a secondary user (`> 0`).
    testExec__TermuxAm__wrapper "-user" " --user '$TERMUX__USER_ID'" || return $?

    # If `--user` flag is not passed to  `am`, then it should
    # automatically use current user as default, so test that.
    testExec__TermuxAm__wrapper "-current-user" "" || return $?

    return 0

}

testExec__TermuxAm__wrapper() {

    local test_name_suffix="$1"
    local user_id_arg="$2"

    # Set `rw-------` permission for `am.apk` to test if `am` correctly
    # makes it read-only to prevent`SIGABRT` on Android `>= 14`.
    # - https://github.com/termux/TermuxAm/commit/598a9c06c325db6d41cc840dedcb8ba34564c79f
    local am_apk_path="$TERMUX__PREFIX/libexec/termux-am/am.apk"
    chmod 0600 "$am_apk_path" || return $?


    if [ "$ANDROID__BUILD_VERSION_SDK" -ge 34 ]; then
        termux_exec__tests__run_script_test "am-broadcast$test_name_suffix" \
            "#!/usr/bin/bash${NL}am broadcast$user_id_arg -a '@TERMUX_APP__NAMESPACE@.test' '$TERMUX_APP__PACKAGE_NAME'" "true" \
            "" "." \
            0 "^.*Broadcast sent without waiting for result$" || return $?
    else
        termux_exec__tests__run_script_test "am-broadcast$test_name_suffix" \
            "#!/usr/bin/bash${NL}am broadcast$user_id_arg -a '@TERMUX_APP__NAMESPACE@.test' '$TERMUX_APP__PACKAGE_NAME'" "true" \
            "" "." \
            0 "^.*Broadcast completed: result=0$" || return $?
    fi

    termux_exec__tests__run_script_test "am-start-activity$test_name_suffix" \
        "#!/usr/bin/bash${NL}am start$user_id_arg '@TERMUX_APP__SHELL_ACTIVITY__COMPONENT_NAME@'" "true" \
        "" "." \
        0 "^.*Starting: Intent \{.*\}.*$" || return $?

    termux_exec__tests__run_script_test "am-start-service$test_name_suffix" \
        "#!/usr/bin/bash${NL}am startservice$user_id_arg '@TERMUX_APP__SHELL_SERVICE__COMPONENT_NAME@'" "true" \
        "" "." \
        0 "^.*Starting service: Intent \{.*\}.*$" || return $?

    return 0

}

testExec__TermuxAmSocket() {

    termux_exec__tests__log 3 "testExec__TermuxAmSocket()"

    # If cannot connect to `TermuxAmSocketServer` in termux-app to get `am` help.
    if [[ "$(termux-am --am-help 2>/dev/null)" != *"usage: am "* ]]; then
        termux_exec__tests__log 3 "Skipping termux-am-socket tests since failed to connect to server"
        return 0
    fi

    # The `--user` flag must be passed if running in a secondary user (`> 0`).
    testExec__TermuxAmSocket__wrapper "-user" " --user '$TERMUX__USER_ID'" || return $?

    # If `--user` flag is not passed to  `termux-am`, then it should
    # automatically use current user as default, so test that.
    if [[ "$TERMUX__USER_ID" == "0" ]]; then
        testExec__TermuxAmSocket__wrapper "-current-user" "" || return $?
    fi

    return 0

}

testExec__TermuxAmSocket__wrapper() {

    local test_name_suffix="$1"
    local user_id_arg="$2"

    termux_exec__tests__run_script_test "termux-am-broadcast$test_name_suffix" \
        "#!/usr/bin/bash${NL}termux-am broadcast$user_id_arg -a '@TERMUX_APP__NAMESPACE@.test' '$TERMUX_APP__PACKAGE_NAME'" "true" \
        "" "." \
        0 "^.*Broadcast completed: result=.*$" || return $? # resultCode seems to be -1

    termux_exec__tests__run_script_test "termux-am-start-activity$test_name_suffix" \
        "#!/usr/bin/bash${NL}termux-am start$user_id_arg '@TERMUX_APP__SHELL_ACTIVITY__COMPONENT_NAME@'" "true" \
        "" "." \
        0 "^.*Starting: Intent \{.*\}.*$" || return $?

    termux_exec__tests__run_script_test "termux-am-start-service$test_name_suffix" \
        "#!/usr/bin/bash${NL}termux-am startservice$user_id_arg '@TERMUX_APP__SHELL_SERVICE__COMPONENT_NAME@'" "true" \
        "" "." \
        0 "^.*Starting service: Intent \{.*\}.*$" || return $?

    return 0

}

testExec__TermuxApi() {

    termux_exec__tests__log 3 "testExec__TermuxApi()"

    # If running as root.
    if [[ "$TERMUX_EXEC__TESTS__UID" == "0" ]]; then
        termux_exec__tests__log 3 "Skipping termux-api tests since running as root"
        return 0
    fi

    # If `termux-app` did not export the version variable for `termux-api` app.
    if [[ ! "$TERMUX_API_APP__APP_VERSION_NAME" =~ ^[0-9].*$ ]]; then
        termux_exec__tests__log 3 "Skipping termux-api tests since app not installed"
        return 0
    fi

    # If `termux-api-package` is not installed.
    if [[ ! -f "$TERMUX__PREFIX/libexec/termux-api" ]]; then
        termux_exec__tests__log 3 "Skipping termux-api tests since package not installed"
        return 0
    fi

    termux_exec__tests__run_script_test "termux-battery-status" \
        "#!/usr/bin/bash${NL}termux-battery-status" "true" \
        "" "." \
        0 "^.*\"percentage\": [0-9]+.*$" || return $?

    termux_exec__tests__run_script_test "termux-usb" \
        "#!/usr/bin/bash${NL}termux-usb -l" "true" \
        "" "." \
        0 "^\[.*\]$" || return $?

    termux_exec__tests__run_script_test "termux-clipboard-set" \
        "#!/usr/bin/bash${NL}termux-clipboard-set termux-api-test" "true" \
        "" "." \
        0 "^$" || return $?

    # Wait for clipboard to be set.
    sleep 3

    termux_exec__tests__run_script_test "termux-clipboard-get" \
        "#!/usr/bin/bash${NL}termux-clipboard-get" "true" \
        "" "." \
        0 "^termux-api-test$" || return $?

    return 0

}

testExec__Tudo() {

    termux_exec__tests__log 3 "testExec__Tudo()"

    local tudo_script_file_path="$TERMUX__PREFIX/bin/tudo"
    local tudo_tests_file_path="$TERMUX__PREFIX/libexec/installed-tests/tudo/tudo_tests"

    if [[ ! -f "$tudo_script_file_path" ]]; then
        termux_exec__tests__log 3 "Skipping tudo tests since tudo not installed"
        return 0
    fi

    if [[ ! -f "$tudo_tests_file_path" ]]; then
        termux_exec__tests__log 3 "Skipping tudo tests since 'tudo_tests' file not found"
        return 0
    fi

    TUDO_TESTS__LOG_LEVEL="$TERMUX_EXEC__TESTS__LOG_LEVEL" "$tudo_tests_file_path" || return $?

    return 0

}

testExec__Sudo() {

    termux_exec__tests__log 3 "testExec__Sudo()"

    local sudo_script_file_path="$TERMUX__PREFIX/bin/sudo"
    local sudo_tests_file_path="$TERMUX__PREFIX/libexec/installed-tests/sudo/sudo_tests"

    if [[ ! -f "$sudo_script_file_path" ]]; then
        termux_exec__tests__log 3 "Skipping sudo tests since sudo not installed"
        return 0
    fi

    if [[ ! -f "$sudo_tests_file_path" ]]; then
        termux_exec__tests__log 3 "Skipping sudo tests since 'sudo_tests' file not found"
        return 0
    fi

    if [[ "$TERMUX_EXEC__TESTS__UID" != "0" ]]; then
        if [[ "$(su -c "id -u")" != "0" ]]; then
            termux_exec__tests__log 3 "Skipping sudo tests since root access is not available"
            return 0
        fi
    fi

    SUDO_TESTS__LOG_LEVEL="$TERMUX_EXEC__TESTS__LOG_LEVEL" "$sudo_tests_file_path" || return $?

    return 0

}



##
# `termux_exec__tests__run_script_test` `<test_name>` `<test_file_content>`
#   `<test_file_make_executable>` `<execution_path>`
#   `<working_directory>` \
#   `<expected_exit_code>` `<expected_output_regex>` [`<script_args...>`]
##
termux_exec__tests__run_script_test() {

    local return_value

    if [[ $# -lt 7 ]]; then
        termux_exec__tests__log_error "Invalid argument count $#. The 'termux_exec__tests__run_script_test' command expects at least 7 arguments: \
 test_name test_file_content test_file_make_executable execution_path working_directory expected_exit_code expected_output_regex [script_args]"
        return 1
    fi

    local test_name="$1"
    local test_file_content="$2"
    local test_file_make_executable="$3"
    local execution_path="$4"
    local working_directory="$5"
    local expected_exit_code="$6"
    local expected_output_regex="$7"
    shift 7 # Remove args before `script_args`

    local output
    local actual_output
    local test_failed="false"

    termux_exec__tests__log 4 "$test_name()"
    termux_exec__tests__log 5 "TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH='$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH'"
    if [[ "$test_file_content" == *"${NL}"* ]]; then
        termux_exec__tests__log 5 "test_file_content=${NL}"'```'"${NL}$test_file_content${NL}"'```'
    else
        termux_exec__tests__log 5 "test_file_content='$test_file_content'"
    fi
    termux_exec__tests__log 5 "test_file_make_executable='$test_file_make_executable'"
    termux_exec__tests__log 5 "execution_path='$execution_path'"
    termux_exec__tests__log 5 "working_directory='$working_directory'"
    termux_exec__tests__log 5 "expected_exit_code='$expected_exit_code'"
    termux_exec__tests__log 5 "expected_output_regex='$expected_output_regex'"

    # If TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH is not a valid absolute path.
    if [[ ! "$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH" =~ $TERMUX_EXEC__TESTS__REGEX__ABSOLUTE_PATH ]]; then
        termux_exec__tests__log_error "The TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH '$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH' is not a valid absolute path"
        return 1
    fi

    rm -f "$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH" || return $?

    output="$(printf "%s" "$test_file_content" > "$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH" 2>&1)"
    return_value=$?
    if [ $return_value -ne 0 ]; then
        termux_exec__tests__log_error "$output"
        termux_exec__tests__log_error "Failed to create the '$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH' file for the '$test_name' test"
        return $return_value
    fi

    if [[ "$test_file_make_executable" == "true" ]]; then
        output="$(chmod +x "$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH" 2>&1)"
        return_value=$?
        if [ $return_value -ne 0 ]; then
            termux_exec__tests__log_error "$output"
            termux_exec__tests__log_error "Failed to set the executable bit for the '$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH' file for the '$test_name' test"
            return $return_value
        fi
    fi

    actual_output="$(cd "$working_directory" && "${execution_path:-$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH}" "$@" 2>&1)"
    actual_exit_code=$?
    if [[ -n "$expected_output_regex" ]] && [[ ! "$actual_output" =~ $expected_output_regex ]]; then
        termux_exec__tests__log_error "FAILED: '$test_name' test"
        termux_exec__tests__log_error "Expected output_regex does not equal match actual output"
        test_failed="true"
    elif [ $actual_exit_code != "$expected_exit_code" ]; then
        termux_exec__tests__log_error "$actual_output"
        termux_exec__tests__log_error "FAILED: '$test_name' test"
        termux_exec__tests__log_error "Expected result_code does not equal actual result_code"
        test_failed="true"
    fi

    if [[ "$test_failed" == "true" ]]; then
        if [[ "$test_file_content" == *"${NL}"* ]]; then
            termux_exec__tests__log_error "test_file_content=${NL}"'```'"${NL}$test_file_content${NL}"'```'
        else
            termux_exec__tests__log_error "test_file_content='$test_file_content'"
        fi
        termux_exec__tests__log_error "actual_exit_code: '$actual_exit_code'"
        termux_exec__tests__log_error "expected_exit_code: '$expected_exit_code'"
        termux_exec__tests__log_error "actual_output: '$actual_output'"
        termux_exec__tests__log_error "expected_output_regex: '$expected_output_regex'"
        return 100
    else
        #termux_exec__tests__log 2 "PASSED"

        # Remove test file so that later tests in like
        # `testExec__SingleAndDoubleDotExecutablePaths()` do not accidentally use it.
        rm -f "$TERMUX_EXEC__TESTS__SCRIPT_TEST_FILE_PATH" || return $?

        return 0
    fi

}



##
# `runtime_script_tests_main`
##
runtime_script_tests_main() {

    termux_exec__tests__log 1 "Start 'runtime_script' tests"

    runExecTests || return $?

    termux_exec__tests__log 1 "End 'runtime_script' tests"

    return 0
}
